class Cat:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def speak(self):
        print("Meow")

class Dog:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def speak(self):
        print("Bark")
        
*** we can re-write the code above more efficiently by using inheritance ***


class Pet: ## Pet is
    def __init__(self, name, age):
        self.name = name
        self.age = age
    def show(self):
        print(f"I am {self.name} and I am {self.age} year old")

    def speak(self):
        print("I do not know what to say")


class Cat(Pet):
    def __init__(self, name, age, color):
        super(Cat, self).__init__(name, age)
        self.color = color


    def speak(self):
        print("Meow")

    def show(self):
        print(f"I am {self.name} and I am {self.color}")

class Dog(Pet):
    def speak(self):
        print("Bark")

    def show(self):
        pass
## Cat and Dog are inherited from the from upper level class

cat = Cat("Tom", 20, "white")
dog = Dog("Jerry", 19)

print(cat.color)
print(dog.age)

////////////////////////////////////////////////////////////////////

class Person:
    number_of_people = 0

    def __init__(self, name):
        self.name = name
        Person.number_of_people += 1

p1 = Person("ibo")
print(Person.number_of_people)

p2 = Person("sue")
print(Person.number_of_people)


/////////////////////////////////////////////////////////////////////

@static method 

class Math:

    def add5(self, x):
        return x + 5

add = Math()
print(add.add5(5))
print(Math.add5(Math(),5))

## instead use static method

class Math1:
    @staticmethod
    def add5(x):
        return x + 5

print(Math1.add5(5))
